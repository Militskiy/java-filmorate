DROP TABLE IF EXISTS genres_films, genres, friends, likes, users, films,
    ratings, reviews, users_reviews, directors_films, directors, events CASCADE;

CREATE TABLE IF NOT EXISTS ratings
(
    rating_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name varchar(10) NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    film_id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_name        varchar(50) NOT NULL,
    film_description varchar(200),
    release_date     date        NOT NULL,
    duration         integer     NOT NULL,
    rating_id        INTEGER REFERENCES ratings (rating_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users
(
    user_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_email varchar(50) NOT NULL,
    user_login varchar(50) NOT NULL,
    user_name  varchar(50),
    birthday   date        NOT NULL
);

CREATE TABLE IF NOT EXISTS likes
(
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS friends
(
    link_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    confirmed BOOLEAN NOT NULL DEFAULT FALSE
        CONSTRAINT validation CHECK (user_id <> friends.friend_id)
);

CREATE TABLE IF NOT EXISTS genres
(
    genre_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre_name varchar(20) NOT NULL,
    CONSTRAINT genres_naming CHECK (genre_name <> '')
);

CREATE TABLE IF NOT EXISTS genres_films
(
    film_id  INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS reviews
(
    review_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR(200) NOT NULL,
    is_positive BOOLEAN      NOT NULL,
    user_id     INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    film_id     INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    useful      INTEGER      NOT NULL DEFAULT 0,
    CONSTRAINT reviews_UC UNIQUE (user_id, film_id)
);

CREATE TABLE IF NOT EXISTS users_reviews
(
    user_id   INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    review_id INTEGER REFERENCES reviews (review_id) ON DELETE CASCADE,
    is_like   BOOLEAN NOT NULL,
    PRIMARY KEY (user_id, review_id)
);

CREATE TABLE IF NOT EXISTS directors (
    director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    director_name varchar(50)
);

CREATE TABLE IF NOT EXISTS directors_films (
    film_id INTEGER REFERENCES films(film_id) ON DELETE CASCADE,
    director_id INTEGER REFERENCES directors(director_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS events (
    event_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    event_type ENUM ('LIKE', 'REVIEW', 'FRIEND'),
    operation ENUM ('REMOVE', 'ADD', 'UPDATE'),
    entity_id INTEGER
);